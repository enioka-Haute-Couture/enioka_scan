package com.enioka.scanner.sdk.honeywelloss.parsers;

import com.enioka.scanner.bt.api.ParsingResult;
import com.enioka.scanner.data.Barcode;
import com.enioka.scanner.sdk.honeywelloss.helpers.MessagePrinter;

import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;

public class BarcodeParserTest {

    /**
     * Generates a buffer with valid headers and chosen data length. The data is just the '9' character.
     * @param dataLength How many bytes of data must be added, including the final 'CR' byte (cannot be lower than 1).
     * @return The generated byte[].
     */
    private byte[] generateScannerBarcodeBuffer(final int dataLength) {
        if (dataLength < 1)
            throw new IllegalArgumentException("dataLength must be >= 1");

        final byte[] buffer = new byte[dataLength + 21];
        buffer[0] = 0x16; // <SYN>
        buffer[1] = (byte) 0xFE;
        buffer[2] = 0x00; // PayloadSize: ignored by parser
        buffer[3] = 0x00; // PayloadSize: ignored by parser
        buffer[4] = 0x00; // PayloadSize: ignored by parser
        buffer[5] = 0x00; // PayloadSize: ignored by parser
        buffer[6] = 0x0D; // <CR>
        buffer[7] = 0X4D; // M
        buffer[8] = 0x53; // S
        buffer[9] = 0x47; // G
        buffer[10] = 0x47; // G
        buffer[11] = 0x45; // E
        buffer[12] = 0x54; // T
        buffer[13] = (byte) (dataLength / 1000 % 10 + 0x30);
        buffer[14] = (byte) (dataLength / 100 % 10 + 0x30);
        buffer[15] = (byte) (dataLength / 10 % 10 + 0x30);
        buffer[16] = (byte) (dataLength % 10 + 0x30);
        buffer[17] = 0x64; // Honeywell ID: ignored by tests (EAN-13 for pretty print)
        buffer[18] = 0x45; // AIM ID: ignored by parser (UPC/EAN for pretty print)
        buffer[19] = 0x30; // AIMmod: ignored by parser
        buffer[20] = 0x1D; // <GS>
        for (int i = 0; i < dataLength; i++)
            buffer[21 + i] = 0x39; // 9
        buffer[dataLength + 20] = 0x0D; // <CR>

        MessagePrinter.prettyPrint(buffer, 0, dataLength + 21); // For debug
        return buffer;
    }

    @Test
    public void testInvalidHeaderByte1() {
        final int dataLength = 1;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);
        buffer[1] = 0x00; // Replace <0xFE> with <0x00>

        final BarcodeParser parser = new BarcodeParser();
        try {
            parser.parse(buffer, 0, dataLength + 21);
            Assert.fail();
        } catch (final IllegalArgumentException ignored) {
        }
    }

    @Test
    public void testInvalidHeaderByte6() {
        final int dataLength = 1;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);
        buffer[6] = 0x00; // Replace <CR> with <0x00>

        final BarcodeParser parser = new BarcodeParser();
        try {
            parser.parse(buffer, 0, dataLength + 21);
            Assert.fail();
        } catch (final IllegalArgumentException ignored) {
        }
    }

    @Test
    public void testInvalidPayloadType() {
        final int dataLength = 1;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);
        buffer[9] = 0x00; // Replace MSGGET with MS<0x00>GET

        final BarcodeParser parser = new BarcodeParser();
        try {
            parser.parse(buffer, 0, dataLength + 21);
            Assert.fail();
        } catch (final IllegalArgumentException ignored) {
        }
    }

    @Test
    public void testInvalidPayloadDelimiterByte() {
        final int dataLength = 1;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);
        buffer[20] = 0x0D; // Replace <GS> with <0x00>

        final BarcodeParser parser = new BarcodeParser();
        try {
            parser.parse(buffer, 0, dataLength + 21);
            Assert.fail();
        } catch (final IllegalArgumentException ignored) {
        }
    }

    @Test
    public void testInvalidDataLengthBadBytes() {
        final int dataLength = 1;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);
        buffer[16] = 0x40; // Corrupt length byte

        final BarcodeParser parser = new BarcodeParser();
        try {
            parser.parse(buffer, 0, dataLength + 21);
            Assert.fail();
        } catch (final IllegalArgumentException ignored) {
        }
    }

    @Test
    public void testInvalidDataLengthZeroOrNegative() { // Cannot only test length<1 but not "too long"
        final int dataLength = 1;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);
        buffer[16] = 0x30; // Make data length = 0

        final BarcodeParser parser = new BarcodeParser();
        try {
            parser.parse(buffer, 0, dataLength + 21);
            Assert.fail();
        } catch (final IllegalArgumentException ignored) {
        }
    }

    @Test
    public void testInvalidDataEndByte() { // Aka data length too short
        final int dataLength = 1;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);
        buffer[dataLength + 20] = 0x00; // Replace final <CR> with <0x00>

        final BarcodeParser parser = new BarcodeParser();
        try {
            parser.parse(buffer, 0, dataLength + 21);
            Assert.fail();
        } catch (final IllegalArgumentException ignored) {
        }
    }

    @Test
    public void testInvalidMultiMessage() { // Received a continuation of message without the start message
        final int dataLength = 1;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);
        buffer[0] = 0x00; // Replace <SYN> with <0x00> meaning the buffer is a continuation of a previous message

        final BarcodeParser parser = new BarcodeParser();
        try {
            parser.parse(buffer, 0, dataLength + 21);
            Assert.fail();
        } catch (final IllegalArgumentException ignored) {
        }
    }

    @Test
    public void testShortBarcode() {
        final int dataLength = 14;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);

        final BarcodeParser parser = new BarcodeParser();
        try {
            final ParsingResult res = parser.parse(buffer, 0, dataLength + 21);
            Assert.assertNotNull("Parsing must return a barcode", res.data);
            Assert.assertEquals(new String(buffer, 21, dataLength - 1), ((Barcode) res.data).getBarcode());
        } catch (final IllegalArgumentException exception) {
            Assert.fail(exception.getMessage());
        }
    }

    @Test
    public void testLongBarcode() {
        final int dataLength = 2048;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);

        final BarcodeParser parser = new BarcodeParser();
        try {
            final ParsingResult res = parser.parse(buffer, 0, dataLength + 21);
            Assert.assertNotNull("Parsing must return a barcode", res.data);
            Assert.assertEquals(new String(buffer, 21, dataLength - 1), ((Barcode) res.data).getBarcode());
        } catch (final IllegalArgumentException exception) {
            Assert.fail(exception.getMessage());
        }
    }

    @Test
    public void testMultiMessageBarcode() {
        final int dataLength = 2048;
        final byte[] buffer = generateScannerBarcodeBuffer(dataLength);

        final BarcodeParser parser = new BarcodeParser();
        try {
            final ParsingResult res1 = parser.parse(Arrays.copyOfRange(buffer, 0, dataLength / 2 + 21), 0, dataLength / 2 + 21);
            Assert.assertNull("First parsing call must not return a barcode", res1.data);
            final ParsingResult res2 = parser.parse(Arrays.copyOfRange(buffer, dataLength / 2 + 21, dataLength + 21), 0, dataLength / 2);
            Assert.assertNotNull("Second parsing call must return a barcode", res2.data);
            Assert.assertEquals(new String(buffer, 21, dataLength - 1), ((Barcode) res2.data).getBarcode());
        } catch (final IllegalArgumentException exception) {
            Assert.fail(exception.getMessage());
        }
    }
}
